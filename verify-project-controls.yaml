- hosts: localhost
  connection: local
  gather_facts: false
  module_defaults:
    community.kubernetes.k8s_auth:
      host: "{{ lookup('env', 'K8S_API_URL') }}"
      validate_certs: false

    community.kubernetes.k8s_info:
      host: "{{ lookup('env', 'K8S_API_URL') }}"
      validate_certs: false

    community.kubernetes.k8s:
      host: "{{ lookup('env', 'K8S_API_URL') }}"
      validate_certs: false

  tasks:
  - name: k8s - get kubernetes auth token
    community.kubernetes.k8s_auth:
      username: "{{ lookup('env', 'K8S_API_USERNAME') }}"
      password: "{{ lookup('env',' K8S_API_PASSWORD') }}"
    register: k8s_auth_results

  - set_fact:
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"

  - name: check - expected users - get list of all RoleBindings in the namespace
    community.kubernetes.k8s_info:
      api_key: "{{ api_key }}"
      api_version: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      namespace: "{{ k8s_namespace }}"
    register: rolebindings

  - set_fact:
      actual_users: "{{ rolebindings.resources | json_query(query)}}"
    vars:
      query: "[].subjects[?kind=='User'].name[]"

  - name: check - expected users - fail if user list doesn't match expected users
    fail:
      msg: "User list mismatch. Expected: {{ expected_users }}, Actual: {{ actual_users }}, Missing: {{ missing }}, Unexpected: {{ unexpected }}"
    vars:
      unexpected: "{{ actual_users | difference(expected_users) }}"
      missing: "{{ expected_users | difference(actual_users) }}"
    when:
      - ( unexpected | length > 0 ) or ( missing | length > 0 )

  - name: check - ensure tls routes - fetch Routes in project
    community.kubernetes.k8s_info:
      api_key: "{{ api_key }}"
      api_version: 'route.openshift.io/v1'
      kind: Route
      namespace: "{{ k8s_namespace }}"
    register: routes

  - name: check - ensure tls routes - fail if any routes do not have TLS sections configured
    fail:
      msg: "Route {{ item.metadata.name }} is non-TLS secured"
    loop: "{{ routes.resources }}"
    loop_control:
      label: "{{ item.metadata.name }}"
    when:
      - item.spec.tls is not defined
